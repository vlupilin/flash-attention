@@ -816,44 +816,49 @@
                 # If include_current_dir True, look first in same dir as the including source file
                 if include_current_dir:
                     header_dir_to_check = os.path.dirname(fin_path)
                     header_path_to_check = os.path.abspath(os.path.join(header_dir_to_check, f))
                     if os.path.exists(header_path_to_check):
                         header_dir = header_dir_to_check
                         header_filepath = header_path_to_check
                 # If not found, look in include dirs one by one and first match wins
                 if header_filepath is None:
                     for header_include_dir in header_include_dirs:
                         header_dir_to_check = os.path.join(output_directory, header_include_dir)
                         header_path_to_check = os.path.abspath(os.path.join(header_dir_to_check, f))
                         if os.path.exists(header_path_to_check):
                             header_dir = header_dir_to_check
                             header_filepath = header_path_to_check
                 # If header file not found, keep as is
                 if header_filepath is None:
                     return m.group(0)
                 # Hipify header file first if needed
                 if header_filepath not in HIPIFY_FINAL_RESULT:
-                    preprocess_file_and_save_result(output_directory,
-                                                    header_filepath,
-                                                    all_files, header_include_dirs, stats, hip_clang_launch,
-                                                    is_pytorch_extension, clean_ctx, show_progress)
+                    # JCG added skip logic
+                     if "composable_kernel" in header_filepath:
+                         print("Force skipping hipification of CK file: " + header_filepath)
+                         HIPIFY_FINAL_RESULT[header_filepath] = {"hipified_path":header_filepath}
+                     else:
+                         preprocess_file_and_save_result(output_directory,
+                                                         header_filepath,
+                                                         all_files, header_include_dirs, stats, hip_clang_launch,
+                                                         is_pytorch_extension, clean_ctx, show_progress)
                 hipified_header_filepath = HIPIFY_FINAL_RESULT[header_filepath]["hipified_path"]
                 return templ.format(os.path.relpath(hipified_header_filepath if hipified_header_filepath is not None
                                                     else header_filepath, header_dir))
 
             return m.group(0)
         return repl
     output_source = RE_QUOTE_HEADER.sub(mk_repl('#include "{0}"', True), output_source)
     output_source = RE_ANGLE_HEADER.sub(mk_repl('#include <{0}>', False), output_source)
     output_source = RE_THC_GENERIC_FILE.sub(mk_repl('#define THC_GENERIC_FILE "{0}"'), output_source)
 
     # CMakeLists.txt rewrites
     if filepath.endswith('CMakeLists.txt'):
         output_source = output_source.replace('CUDA', 'HIP')
         output_source = output_source.replace('THC', 'THH')
         output_source = RE_CU_SUFFIX.sub('.hip', output_source)
 
     # Perform Kernel Launch Replacements
     if not hip_clang_launch:
         output_source = processKernelLaunches(output_source, stats)